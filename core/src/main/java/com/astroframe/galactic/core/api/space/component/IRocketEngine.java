package com.astroframe.galactic.core.api.space.component;

import com.astroframe.galactic.core.api.space.component.enums.EngineType;

import java.util.List;

/**
 * Interface for rocket engine components.
 * Extends the base IRocketComponent interface with engine-specific functionality.
 */
public interface IRocketEngine extends IRocketComponent {
    
    /**
     * Gets the type of this engine.
     * 
     * @return The engine type
     */
    EngineType getEngineType();
    
    /**
     * Gets the thrust provided by this engine.
     * 
     * @return The thrust value
     */
    double getThrust();
    
    /**
     * Gets the efficiency of this engine.
     * Higher values mean less fuel consumption.
     * 
     * @return The efficiency value between 0 and 1
     */
    double getEfficiency();
    
    /**
     * Gets the specific impulse (Isp) of this engine.
     * This is a measure of how effectively the engine uses propellant.
     * 
     * @return The specific impulse value
     */
    default double getSpecificImpulse() {
        return getThrust() * getEfficiency();
    }
    
    /**
     * Gets the fuel types that this engine can use.
     * 
     * @return A list of compatible fuel types
     */
    List<FuelType> getCompatibleFuels();
    
    /**
     * Gets the primary fuel type for this engine.
     * 
     * @return The primary fuel type
     */
    FuelType getFuelType();
    
    /**
     * Checks if this engine can operate in atmosphere.
     * 
     * @return true if the engine can operate in atmosphere
     */
    boolean canOperateInAtmosphere();
    
    /**
     * Checks if this engine can operate in space.
     * 
     * @return true if the engine can operate in space
     */
    boolean canOperateInSpace();
    
    /**
     * Gets the fuel consumption rate of this engine per unit of time.
     * 
     * @return The fuel consumption rate
     */
    double getFuelConsumptionRate();
    
    /**
     * Gets the heat generated by this engine when operating.
     * 
     * @return The heat generation rate
     */
    double getHeatGeneration();
    
    /**
     * Gets the required mounting position for this engine.
     * Some engines may need to be mounted at specific positions.
     * 
     * @return The required mounting position, or null if none
     */
    default MountingPosition getRequiredMountingPosition() {
        return MountingPosition.ANY;
    }
    
    /**
     * Enum for the different mounting positions for engines.
     */
    enum MountingPosition {
        BOTTOM,
        SIDE,
        TOP,
        ANY
    }
    
    /**
     * Gets the component type.
     * All engines should return ENGINE.
     * 
     * @return The component type
     */
    @Override
    default RocketComponentType getType() {
        return RocketComponentType.ENGINE;
    }
}